{"version":3,"sources":["reducers/rootReducer.js","containers/webSocketApi.js","components/Header.js","components/CurrencyButton.js","components/Tables/SellBuyTable.js","components/Tables/index.js","components/Exchange.js","App.js","serviceWorker.js","index.js"],"names":["initState","url","currency","response","rootReducer","state","arguments","length","undefined","action","type","Object","objectSpread","highestBid","data","buy","ra","lowestBid","sell","bids","lowestAsk","WebSocketApi","_this","this","axios","get","props","then","fetchApi","catch","error","_this2","webSocket","WebSocket","onopen","send","onmessage","e","parsedData","JSON","parse","hasOwnProperty","message","market","code","updateWebsocket","websocket","prevProps","Component","connect","dispatch","Header","react_default","a","createElement","CurrencyButton","_ref","onChange","FormControl_default","InputLabel_default","htmlFor","Select_default","value","inputProps","name","id","MenuItem_default","SellBuyTable","buySell","text1","text2","splitCurrency","split","table","slice","map","item","index","key","pa","toFixed","className","Index","_this$props$state","Tables_SellBuyTable","Exchange","highestClass","lowestClass","App","target","changeCurrencyR","setState","setTimeout","_this3","webSocketApi","components_Header","components_CurrencyButton","changeCurrency","components_Exchange","Tables","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e33a161.chunk.js","sourcesContent":["const initState = {\r\n    url: 'https://api.bitbay.net/rest/trading/orderbook/',\r\n    currency: 'BTC-PLN',\r\n    response: {}\r\n};\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    // console.log(state);\r\n    // console.log(action);\r\n    switch (action.type) {\r\n        case 'FETCH_API':\r\n            return {\r\n                ...state,\r\n                response: {...action.response},\r\n                highestBid: action.response.data.buy[0].ra,\r\n                lowestBid: action.response.data.sell[0].ra\r\n            };\r\n\r\n        case 'UPDATE_WEBSOCKET':\r\n            return {\r\n                ...state,\r\n                highestBid: action.bids.highestBid,\r\n                lowestBid: action.bids.lowestAsk\r\n            };\r\n\r\n        case 'CHANGE_CURRENCY':\r\n            return {\r\n                ...state,\r\n                currency: action.currency\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default rootReducer;\r\n","import {Component} from 'react'\r\nimport {connect} from 'react-redux';\r\nimport axios from \"axios\";\r\n\r\nclass WebSocketApi extends Component {\r\n\r\n    fetchApi() {\r\n        axios.get(this.props.state.url + this.props.state.currency)\r\n            .then(response => {\r\n                this.props.fetchApi(response);\r\n            })\r\n            .catch(error => {\r\n                // this.setState({error});\r\n            });\r\n    }\r\n\r\n    websocket() {\r\n        const webSocket = new WebSocket('wss://api2.bitbay.net/websocket/');\r\n        webSocket.onopen = () => {\r\n            webSocket.send(`{\"action\": \"subscribe-public\", \"module\": \"trading\", \"path\": \"ticker\"}`)\r\n        };\r\n\r\n        webSocket.onmessage = e => {\r\n            const data = e.data,\r\n                parsedData = JSON.parse(data);\r\n\r\n            if (parsedData.hasOwnProperty('message')) {\r\n                if (parsedData.message.market.code === this.props.state.currency) {\r\n                    this.props.updateWebsocket(parsedData.message);\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchApi();\r\n        this.websocket();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.state.currency !== this.props.state.currency) {\r\n            this.fetchApi();\r\n            this.websocket();\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        state: state\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchApi: (response) => {\r\n            dispatch({type: 'FETCH_API', response: response})\r\n        },\r\n        updateWebsocket: (bids) => {\r\n            dispatch({type: 'UPDATE_WEBSOCKET', bids: bids})\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WebSocketApi);\r\n","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <h2>Booty Bay</h2>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport FormControl from \"@material-ui/core/FormControl/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\r\nimport Select from \"@material-ui/core/Select/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem/MenuItem\";\r\n\r\nconst CurrencyButton = ({currency, onChange}) => {\r\n    return (\r\n        <div>\r\n            <FormControl>\r\n                <InputLabel htmlFor=\"currency-simple\">Waluta</InputLabel>\r\n                <Select\r\n                    value={currency}\r\n                    onChange={(e) => onChange(e)}\r\n                    inputProps={{\r\n                        name: 'currency',\r\n                        id: 'currency-simple',\r\n                    }}\r\n                >\r\n                    <MenuItem value=\"BTC-PLN\">BTC-PLN</MenuItem>\r\n                    <MenuItem value=\"ETH-PLN\">ETH-PLN</MenuItem>\r\n                    <MenuItem value=\"LSK-PLN\">LSK-PLN</MenuItem>\r\n                    <MenuItem value=\"LTC-PLN\">LTC-PLN</MenuItem>\r\n                    <MenuItem value=\"GAME-PLN\">GAME-PLN</MenuItem>\r\n                    <MenuItem value=\"DASH-PLN\">DASH-PLN</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrencyButton;\r\n","import React from 'react';\r\n\r\nconst SellBuyTable = ({response, currency, buySell}) => {\r\n\r\n    if (!response.hasOwnProperty('data')) {\r\n        return <h2>Fetching data from API</h2>\r\n    } else {\r\n        const splitCurrency = currency.split('-');\r\n\r\n        let data, text1, text2;\r\n\r\n        if (buySell === 'buy') {\r\n            data = response.data.buy;\r\n            text1 = 'Oferty skupu - ';\r\n            text2 = 'BID'\r\n        } else {\r\n            data = response.data.sell;\r\n            text1 = 'Oferty sprzedaży - ';\r\n            text2 = 'ASK';\r\n        }\r\n\r\n        let table = data.slice(0, 10).map((item, index) => {\r\n            return (\r\n                <tr key={index}>\r\n                    <td>{item.ra}</td>\r\n                    <td>{item.pa}</td>\r\n                    <td>{(item.ra * item.pa).toFixed(2)}</td>\r\n                </tr>\r\n            )\r\n        });\r\n\r\n        return (\r\n            <div className={'orderbook ' + text2}>\r\n                <h4>{text1}<span>{text2}</span></h4>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-bordered\">\r\n                        <tbody>\r\n                        <tr className=\"table-head\">\r\n                            <th>Kurs</th>\r\n                            <th>Ilość <span>{splitCurrency[0]}</span></th>\r\n                            <th>Suma <span>{splitCurrency[1]}</span></th>\r\n                        </tr>\r\n                        {table}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SellBuyTable;\r\n","import React, {Component} from 'react';\r\n\r\nimport SellBuyTable from './SellBuyTable';\r\n\r\nclass Index extends Component {\r\n    render() {\r\n        const {currency, response} = this.props.state;\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-6\">\r\n                    <SellBuyTable buySell={'buy'} response={response} currency={currency}/>\r\n                </div>\r\n\r\n                <div className=\"col-sm-6\">\r\n                    <SellBuyTable buySell={'sell'} response={response} currency={currency}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Index;\r\n","import React from 'react';\r\n\r\nconst Exchange = ({highestBid, lowestBid, highestClass, lowestClass}) => {\r\n    return (\r\n        <div className=\"buy-sell\">\r\n            <p className=\"buy\">\r\n                <b>SKUP • BID: </b>\r\n                <span className={highestClass}>{highestBid}</span>\r\n            </p>\r\n\r\n            <p className=\"sell\">\r\n                <b>SPRZEDAŻ • ASK: </b>\r\n                <span className={lowestClass}>{lowestBid}</span>\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Exchange;\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './App.css';\r\nimport './styles/main.css';\r\n\r\nimport WebSocketApi from './containers/webSocketApi';\r\nimport Header from './components/Header';\r\nimport CurrencyButton from './components/CurrencyButton';\r\nimport Tables from './components/Tables/index';\r\nimport Exchange from './components/Exchange';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        lowestClass: '',\r\n        highestClass: ''\r\n    };\r\n\r\n    changeCurrency(e) {\r\n        const value = e.target.value;\r\n        this.props.changeCurrencyR(value);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.highestBid !== this.props.highestBid) {\r\n            this.setState({highestClass: 'updated'},\r\n                () => setTimeout( () => {\r\n                    this.setState({highestClass: ''})\r\n                }, 250));\r\n        }\r\n\r\n        if (prevProps.lowestBid !== this.props.lowestBid) {\r\n            this.setState({lowestClass: 'updated'},\r\n                () => setTimeout( () => {\r\n                    this.setState({lowestClass: ''})\r\n                }, 250));\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <WebSocketApi/>\r\n                <Header/>\r\n                <CurrencyButton currency={this.props.currency} onChange={(e) => this.changeCurrency(e)}/>\r\n                <Exchange highestBid={this.props.highestBid}\r\n                          lowestBid={this.props.lowestBid}\r\n                          highestClass={this.state.highestClass}\r\n                          lowestClass={this.state.lowestClass}/>\r\n                <Tables state={this.props}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currency: state.currency,\r\n        response: state.response,\r\n        highestBid: state.highestBid,\r\n        lowestBid: state.lowestBid\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeCurrencyR: (currency) => {\r\n            dispatch({type: 'CHANGE_CURRENCY', currency: currency})\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {createStore} from 'redux';\r\nimport {Provider} from 'react-redux';\r\n\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}