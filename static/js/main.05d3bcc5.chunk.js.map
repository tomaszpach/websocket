{"version":3,"sources":["reducers/rootReducer.js","containers/webSocketApi.js","components/Header.js","components/CurrencyButton.js","components/Tables/SellBuyTable.js","components/Tables/index.js","components/Exchange.js","App.js","serviceWorker.js","index.js"],"names":["initState","url","currency","response","rootReducer","state","arguments","length","undefined","action","console","log","type","Object","objectSpread","highestBid","data","buy","ra","lowestBid","sell","bids","lowestAsk","WebSocketApi","_this","this","axios","get","props","then","fetchApi","catch","error","_this2","webSocket","WebSocket","onopen","send","onmessage","e","parsedData","JSON","parse","hasOwnProperty","message","market","code","updateWebsocket","setState","websocket","prevProps","Component","connect","dispatch","Header","_ref","react_default","a","createElement","CurrencyButton","onChange","FormControl_default","InputLabel_default","htmlFor","Select_default","value","inputProps","name","id","MenuItem_default","SellBuyTable","buySell","text1","text2","splitCurrency","split","table","map","item","index","key","pa","toFixed","className","Index","_this$props$state","Tables_SellBuyTable","Exchange","App","target","changeCurrencyR","webSocketApi","components_Header","components_CurrencyButton","changeCurrency","components_Exchange","Tables","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.05d3bcc5.chunk.js","sourcesContent":["const initState = {\r\n    url: 'https://api.bitbay.net/rest/trading/orderbook/',\r\n    currency: 'BTC-PLN',\r\n    response: {}\r\n};\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    // console.log(state);\r\n    console.log(action);\r\n    switch (action.type) {\r\n        case 'FETCH_API':\r\n            return {\r\n                ...state,\r\n                response: {...action.response},\r\n                highestBid: action.response.data.buy[0].ra,\r\n                lowestBid: action.response.data.sell[0].ra\r\n            };\r\n\r\n        case 'UPDATE_WEBSOCKET':\r\n            return {\r\n                ...state,\r\n                highestBid: action.bids.highestBid,\r\n                lowestBid: action.bids.lowestAsk\r\n            };\r\n\r\n        case 'CHANGE_CURRENCY':\r\n            return {\r\n                ...state,\r\n                currency: action.currency\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default rootReducer;\r\n","import {Component} from 'react'\r\nimport {connect} from 'react-redux';\r\nimport axios from \"axios\";\r\n\r\nclass WebSocketApi extends Component {\r\n\r\n    fetchApi() {\r\n        axios.get(this.props.state.url + this.props.state.currency)\r\n            .then(response => {\r\n                this.props.fetchApi(response);\r\n            })\r\n            .catch(error => {\r\n                // this.setState({error});\r\n            });\r\n\r\n    }\r\n\r\n    websocket() {\r\n        const webSocket = new WebSocket('wss://api2.bitbay.net/websocket/');\r\n        webSocket.onopen = () => {\r\n            webSocket.send(`{\"action\": \"subscribe-public\", \"module\": \"trading\", \"path\": \"ticker\"}`)\r\n        };\r\n\r\n        webSocket.onmessage = e => {\r\n            const data = e.data,\r\n                parsedData = JSON.parse(data);\r\n\r\n            // this.props.updateWebsocket(parsedData);\r\n\r\n            if (parsedData.hasOwnProperty('message')) {\r\n                if (parsedData.message.market.code === this.props.state.currency) {\r\n                    this.props.updateWebsocket(parsedData.message);\r\n                    console.log(parsedData);\r\n                }\r\n            }\r\n\r\n            this.setState({parsedData});\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchApi();\r\n        this.websocket();\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.state.currency !== this.props.state.currency) {\r\n            this.fetchApi();\r\n            this.websocket();\r\n        }\r\n        // console.log(prevProps);\r\n        // console.log('update?')\r\n    }\r\n\r\n\r\n    render() {\r\n        return null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        state: state\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchApi: (response) => {\r\n            dispatch({type: 'FETCH_API', response: response})\r\n        },\r\n        updateWebsocket: (bids) => {\r\n            dispatch({ type: 'UPDATE_WEBSOCKET', bids: bids })\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WebSocketApi);\r\n","import React from 'react';\r\n\r\nconst Header = ({currency}) => {\r\n    return (\r\n        <h2>Booty Bay</h2>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport FormControl from \"@material-ui/core/FormControl/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\r\nimport Select from \"@material-ui/core/Select/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem/MenuItem\";\r\n\r\nconst CurrencyButton = ({currency, onChange}) => {\r\n    return (\r\n        <div>\r\n            <FormControl>\r\n                <InputLabel htmlFor=\"currency-simple\">Waluta</InputLabel>\r\n                <Select\r\n                    value={currency}\r\n                    onChange={(e) => onChange(e)}\r\n                    inputProps={{\r\n                        name: 'currency',\r\n                        id: 'currency-simple',\r\n                    }}\r\n                >\r\n                    <MenuItem value=\"BTC-PLN\">BTC-PLN</MenuItem>\r\n                    <MenuItem value=\"ETH-PLN\">ETH-PLN</MenuItem>\r\n                    <MenuItem value=\"LSK-PLN\">LSK-PLN</MenuItem>\r\n                    <MenuItem value=\"LTC-PLN\">LTC-PLN</MenuItem>\r\n                    <MenuItem value=\"GAME-PLN\">GAME-PLN</MenuItem>\r\n                    <MenuItem value=\"DASH-PLN\">DASH-PLN</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CurrencyButton;\r\n","import React from 'react';\r\n\r\n// todo add loader\r\nconst SellBuyTable = ({response, currency, buySell}) => {\r\n\r\n    if (!response.hasOwnProperty('data')) {\r\n        return <h2>Fetching data from API</h2>\r\n    } else {\r\n        const splitCurrency = currency.split('-');\r\n\r\n        let data, text1, text2;\r\n\r\n        if (buySell === 'buy') {\r\n            data = response.data.buy;\r\n            text1 = 'Oferty skupu - ';\r\n            text2 = 'BID'\r\n        } else {\r\n            data = response.data.sell;\r\n            text1 = 'Oferty sprzedaży - ';\r\n            text2 = 'ASK';\r\n        }\r\n\r\n\r\n        let table = data.map((item, index) => {\r\n            if (index <= 10) {\r\n                return (\r\n                    <tr key={index}>\r\n                        <td>{item.ra}</td>\r\n                        <td>{item.pa}</td>\r\n                        <td>{(item.ra * item.pa).toFixed(2)}</td>\r\n                    </tr>\r\n                )\r\n            }\r\n        });\r\n\r\n        return (\r\n            <div className={'orderbook ' + text2}>\r\n                <h4>{text1}<span>{text2}</span></h4>\r\n                <div className=\"table-responsive\">\r\n                    <table className=\"table table-bordered\">\r\n                        <tbody>\r\n                        <tr className=\"table-head\">\r\n                            <th>Kurs</th>\r\n                            <th>Ilość <span>{splitCurrency[0]}</span></th>\r\n                            <th>Suma <span>{splitCurrency[1]}</span></th>\r\n                        </tr>\r\n                        {table}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default SellBuyTable;\r\n","import React, {Component} from 'react';\r\n\r\nimport SellBuyTable from './SellBuyTable';\r\n\r\nclass Index extends Component {\r\n    render() {\r\n        const {currency, response} = this.props.state;\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-6\">\r\n                    <SellBuyTable buySell={'buy'} response={response} currency={currency}/>\r\n                </div>\r\n\r\n                <div className=\"col-sm-6\">\r\n                    <SellBuyTable buySell={'sell'} response={response} currency={currency}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Index;\r\n","import React from 'react';\r\n\r\nconst Exchange = ({highestBid, lowestBid}) => {\r\n    return (\r\n        <div className=\"buy-sell\">\r\n            <p className=\"buy\">\r\n                <b>SKUP • BID: </b><span>{highestBid}</span>\r\n            </p>\r\n\r\n            <p className=\"sell\">\r\n                <b>SPRZEDAŻ • ASK: </b><span>{lowestBid}</span>\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Exchange;\r\n","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport './App.css';\r\nimport './styles/main.css';\r\n\r\nimport WebSocketApi from './containers/webSocketApi';\r\nimport Header from './components/Header';\r\nimport CurrencyButton from './components/CurrencyButton';\r\nimport Tables from './components/Tables/index';\r\nimport Exchange from './components/Exchange';\r\n\r\n// todo add gh-pages and push build\r\n// todo dodaj podświetlenie dla zmian\r\nclass App extends Component {\r\n    changeCurrency(e) {\r\n        const value = e.target.value;\r\n        this.props.changeCurrencyR(value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <WebSocketApi/>\r\n                <Header/>\r\n                <CurrencyButton currency={this.props.currency} onChange={(e) => this.changeCurrency(e)}/>\r\n                <Exchange highestBid={this.props.highestBid} lowestBid={this.props.lowestBid}/>\r\n                <Tables state={this.props}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        currency: state.currency,\r\n        response: state.response,\r\n        highestBid: state.highestBid,\r\n        lowestBid: state.lowestBid\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        changeCurrencyR: (currency) => {\r\n            dispatch({type: 'CHANGE_CURRENCY', currency: currency})\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {createStore} from 'redux';\r\nimport {Provider} from 'react-redux';\r\n\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}