{"version":3,"sources":["components/Header.js","components/WebSocketData.js","components/WebSocketComponent.js","components/Sell.js","components/CurrencyButton.js","components/Api.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","WebSocketData","state","buyText","sellText","prevProps","prevState","data","hasOwnProperty","message","market","code","this","props","currency","nextProps","nextState","response","buy","ra","sell","highestBid","lowestAsk","React","Component","WebSocketComponent","parsedData","_this2","webSocket","WebSocket","onopen","send","onmessage","e","JSON","parse","setState","components_WebSocketData","Sell","_ref","map","item","index","key","CurrencyButton","onChange","FormControl_default","InputLabel_default","htmlFor","Select_default","value","inputProps","name","id","MenuItem_default","Api","_this","_this$props$state","components_CurrencyButton","changeCurrency","components_Sell","App","url","axios","get","then","catch","error","_this3","target","fetchData","_this4","className","components_Header","components_WebSocketComponent","components_Api","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sLAUeA,SARA,WACX,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0BC8CGC,6MAhDXC,MAAQ,CACJC,QAAS,cACTC,SAAU,0GAEKC,EAAWC,GAC1B,SAAID,EAAUE,KAAKC,eAAe,YAC1BH,EAAUE,KAAKE,QAAQC,OAAOC,OAASC,KAAKC,MAAMC,wDAOxCC,EAAWC,GAC7B,GAAID,EAAUR,KAAKC,eAAe,YAC9B,GAAIO,EAAUR,KAAKE,QAAQC,OAAOC,OAASC,KAAKC,MAAMC,SAClD,OAAO,OAER,GAAIF,KAAKC,MAAMI,SAAST,eAAe,QAC1C,OAAO,EAGX,OAAO,mCAIP,OAAII,KAAKC,MAAMI,SAAST,eAAe,UAAYI,KAAKC,MAAMN,KAAKC,eAAe,WAE1EV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAIY,KAAKV,MAAMC,QAAf,IAAyBS,KAAKC,MAAMI,SAASV,KAAKW,IAAI,GAAGC,IACzDrB,EAAAC,EAAAC,cAAA,SAAIY,KAAKV,MAAME,SAAf,IAA0BQ,KAAKC,MAAMI,SAASV,KAAKa,KAAK,GAAGD,KAKnEP,KAAKC,MAAMN,KAAKC,eAAe,WAE3BV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAIY,KAAKV,MAAMC,QAAf,IAAyBS,KAAKC,MAAMN,KAAKE,QAAQY,YACjDvB,EAAAC,EAAAC,cAAA,SAAIY,KAAKV,MAAME,SAAf,IAA0BQ,KAAKC,MAAMN,KAAKE,QAAQa,YAKvDxB,EAAAC,EAAAC,cAAA,uCA7CauB,IAAMC,WC6BnBC,6MA3BXvB,MAAQ,CACJwB,WAAY,uFAGI,IAAAC,EAAAf,KACVgB,EAAY,IAAIC,UAAU,oCAChCD,EAAUE,OAAS,WACfF,EAAUG,KAAK,0EAGnBH,EAAUI,UAAY,SAAAC,GAClB,IAAM1B,EAAO0B,EAAE1B,KACXmB,EAAaQ,KAAKC,MAAM5B,GAE5BoB,EAAKS,SAAS,CAACV,iDAKnB,OACI5B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACqC,EAAD,CAAepB,SAAUL,KAAKC,MAAMI,SAAUV,KAAMK,KAAKV,MAAMwB,WAAYZ,SAAUF,KAAKC,MAAMC,mBAtB/EU,aCiBlBc,EAlBF,SAAAC,GAA0B,IAAxBtB,EAAwBsB,EAAxBtB,SAAUH,EAAcyB,EAAdzB,SAErB,OAAKG,EAAST,eAAe,QAKzBV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,yCAA4Bc,GAExBG,EAASV,KAAKa,KAAKoB,IAAI,SAACC,EAAMC,GAC1B,OAAO5C,EAAAC,EAAAC,cAAA,MAAI2C,IAAKD,GAAQD,EAAKtB,OARlCrB,EAAAC,EAAAC,cAAA,yGC0BA4C,EAzBQ,SAAAL,GAA0B,IAAxBzB,EAAwByB,EAAxBzB,SAAU+B,EAAcN,EAAdM,SAC/B,OACI/C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC8C,EAAA/C,EAAD,KACID,EAAAC,EAAAC,cAAC+C,EAAAhD,EAAD,CAAYiD,QAAQ,mBAApB,YACAlD,EAAAC,EAAAC,cAACiD,EAAAlD,EAAD,CACImD,MAAOpC,EACP+B,SAAU,SAACZ,GAAD,OAAOY,EAASZ,IAC1BkB,WAAY,CACRC,KAAM,WACNC,GAAI,oBAGRvD,EAAAC,EAAAC,cAACsD,EAAAvD,EAAD,CAAUmD,MAAM,WAAhB,WACApD,EAAAC,EAAAC,cAACsD,EAAAvD,EAAD,CAAUmD,MAAM,WAAhB,WACApD,EAAAC,EAAAC,cAACsD,EAAAvD,EAAD,CAAUmD,MAAM,WAAhB,WACApD,EAAAC,EAAAC,cAACsD,EAAAvD,EAAD,CAAUmD,MAAM,WAAhB,WACApD,EAAAC,EAAAC,cAACsD,EAAAvD,EAAD,CAAUmD,MAAM,YAAhB,gBCHLK,mLAbF,IAAAC,EAAA5C,KAAA6C,EACwB7C,KAAKC,MAAMX,MAAjCY,EADF2C,EACE3C,SAAUG,EADZwC,EACYxC,SAEjB,OACInB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAC0D,EAAD,CAAgB5C,SAAUA,EAAU+B,SAAU,SAACZ,GAAD,OAAOuB,EAAK3C,MAAM8C,eAAe1B,MAC/EnC,EAAAC,EAAAC,cAAC4D,EAAD,CAAM3C,SAAUA,EAAUH,SAAUA,YARlCU,8BC2CHqC,6MAtCX3D,MAAQ,CACJ4D,IAAK,iDACLhD,SAAU,UACVG,SAAU,+EAGF,IAAAU,EAAAf,KACRmD,IAAMC,IAAIpD,KAAKV,MAAM4D,IAAMlD,KAAKV,MAAMY,UACjCmD,KAAK,SAAAhD,GACFU,EAAKS,SAAS,CAACnB,eAElBiD,MAAM,SAAAC,GACHxC,EAAKS,SAAS,CAAC+B,mDAIZlC,GAAG,IAAAmC,EAAAxD,KACRsC,EAAQjB,EAAEoC,OAAOnB,MACvBtC,KAAKwB,SAAS,CAACtB,SAAUoC,GAAQ,kBAAMkB,EAAKE,0DAI5C1D,KAAK0D,6CAKA,IAAAC,EAAA3D,KACL,OACId,EAAAC,EAAAC,cAAA,OAAKwE,UAAU,OACX1E,EAAAC,EAAAC,cAACyE,EAAD,MACA3E,EAAAC,EAAAC,cAAC0E,EAAD,CAAWzD,SAAUL,KAAKV,MAAMe,SAAUH,SAAUF,KAAKV,MAAMY,WAC/DhB,EAAAC,EAAAC,cAAC2E,EAAD,CAAKzE,MAAOU,KAAKV,MAAOyD,eAAgB,SAAC1B,GAAD,OAAOsC,EAAKZ,eAAe1B,cAjCjET,aCEEoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpF,EAAAC,EAAAC,cAACmF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.77d4f6e2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <div>\n            <h2>Booty Bay</h2>\n        </div>\n    );\n};\n\nexport default Header;\n","import React from 'react';\n\nclass WebSocketData extends React.Component {\n    state = {\n        buyText: 'SKUP * BID:',\n        sellText: 'SPRZEDAŻ * ASK:'\n    };\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.data.hasOwnProperty('message')) {\n            if (prevProps.data.message.market.code === this.props.currency) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.data.hasOwnProperty('message')) {\n            if (nextProps.data.message.market.code === this.props.currency) {\n                return true;\n            }\n        } else if (this.props.response.hasOwnProperty('data')) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        if (this.props.response.hasOwnProperty('data') && !this.props.data.hasOwnProperty('message')) {\n            return (\n                <div>\n                    <p>{this.state.buyText} {this.props.response.data.buy[0].ra}</p>\n                    <p>{this.state.sellText} {this.props.response.data.sell[0].ra}</p>\n                </div>\n            );\n        }\n\n        if (this.props.data.hasOwnProperty('message')) {\n            return (\n                <div>\n                    <p>{this.state.buyText} {this.props.data.message.highestBid}</p>\n                    <p>{this.state.sellText} {this.props.data.message.lowestAsk}</p>\n                </div>\n            );\n        }\n\n        return <div>Pobieranie danych</div>\n    }\n}\n\nexport default WebSocketData;\n","import React, {Component} from 'react';\nimport WebSocketData from './WebSocketData';\n\nclass WebSocketComponent extends Component {\n    state = {\n        parsedData: {}\n    };\n\n    componentDidMount() {\n        const webSocket = new WebSocket('wss://api2.bitbay.net/websocket/');\n        webSocket.onopen = () => {\n            webSocket.send('{\"action\": \"subscribe-public\", \"module\": \"trading\", \"path\": \"ticker\"}')\n        };\n\n        webSocket.onmessage = e => {\n            const data = e.data,\n                parsedData = JSON.parse(data);\n\n            this.setState({parsedData});\n        };\n    }\n\n    render() {\n        return (\n            <div>\n                <WebSocketData response={this.props.response} data={this.state.parsedData} currency={this.props.currency}/>\n            </div>\n        );\n    }\n}\n\nexport default WebSocketComponent;\n","import React from 'react';\n\nconst Sell = ({response, currency}) => {\n    // todo add loader\n    if (!response.hasOwnProperty('data')) {\n        return <h2>Fetching data from API</h2>\n    }\n\n    return (\n        <div>\n            <h2>Oferty sprzedaży ASK - {currency}</h2>\n            {\n                response.data.sell.map((item, index) => {\n                    return <li key={index}>{item.ra}</li>\n                })\n            }\n        </div>\n    );\n};\n\nexport default Sell;\n","import React from 'react';\nimport FormControl from \"@material-ui/core/FormControl/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\nimport Select from \"@material-ui/core/Select/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem/MenuItem\";\n\nconst CurrencyButton = ({currency, onChange}) => {\n    return (\n        <div>\n            <FormControl>\n                <InputLabel htmlFor=\"currency-simple\">Currency</InputLabel>\n                <Select\n                    value={currency}\n                    onChange={(e) => onChange(e)}\n                    inputProps={{\n                        name: 'currency',\n                        id: 'currency-simple',\n                    }}\n                >\n                    <MenuItem value=\"BTC-PLN\">BTC-PLN</MenuItem>\n                    <MenuItem value=\"ETH-PLN\">ETH-PLN</MenuItem>\n                    <MenuItem value=\"LSK-PLN\">LSK-PLN</MenuItem>\n                    <MenuItem value=\"LTC-PLN\">LTC-PLN</MenuItem>\n                    <MenuItem value=\"GAME-PLN\">GAME-PLN</MenuItem>\n                </Select>\n            </FormControl>\n        </div>\n\n    );\n};\n\nexport default CurrencyButton;\n","import React, {Component} from 'react';\n\nimport Sell from './Sell';\n\nimport CurrencyButton from './CurrencyButton';\n\nclass Api extends Component {\n    render() {\n        const {currency, response} = this.props.state;\n\n        return (\n            <div>\n                <h1>API:</h1>\n                <CurrencyButton currency={currency} onChange={(e) => this.props.changeCurrency(e)}/>\n                <Sell response={response} currency={currency}/>\n            </div>\n        );\n    }\n}\n\nexport default Api;\n","import React, {Component} from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport Header from './components/Header';\nimport WebSocket from './components/WebSocketComponent';\nimport Api from './components/Api';\nimport axios from \"axios\";\n\n// todo add gh-pages and push build\nclass App extends Component {\n    state = {\n        url: 'https://api.bitbay.net/rest/trading/orderbook/',\n        currency: 'BTC-PLN',\n        response: {}\n    };\n\n    fetchData() {\n        axios.get(this.state.url + this.state.currency)\n            .then(response => {\n                this.setState({response})\n            })\n            .catch(error => {\n                this.setState({error});\n            });\n    }\n\n    changeCurrency(e) {\n        const value = e.target.value;\n        this.setState({currency: value}, () => this.fetchData());\n    }\n\n    componentDidMount() {\n        this.fetchData();\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Header />\n                <WebSocket response={this.state.response} currency={this.state.currency}/>\n                <Api state={this.state} changeCurrency={(e) => this.changeCurrency(e)}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}