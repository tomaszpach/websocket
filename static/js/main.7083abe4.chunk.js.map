{"version":3,"sources":["reducers/rootReducer.js","containers/webSocketApi.js","components/Header.js","components/CurrencyButton.js","components/Tables/SellBuyTable.js","components/Tables/index.js","components/Exchange.js","components/Loader/Loader.js","App.js","serviceWorker.js","index.js"],"names":["initState","url","currency","response","loading","rootReducer","state","arguments","length","undefined","action","type","Object","objectSpread","toggle","highestBid","data","buy","ra","lowestBid","sell","error","bids","lowestAsk","WebSocketApi","_this","this","props","toggleLoader","axios","get","then","status","fetchApi","fetchError","catch","_this2","webSocket","WebSocket","onopen","send","onmessage","e","parsedData","JSON","parse","hasOwnProperty","message","market","code","updateWebsocket","websocket","prevProps","Component","connect","dispatch","Header","react_default","a","createElement","className","CurrencyButton","_ref","onChange","FormControl_default","InputLabel_default","htmlFor","Select_default","value","inputProps","name","id","MenuItem_default","SellBuyTable","buySell","text1","text2","splitCurrency","split","table","slice","map","item","index","key","pa","toFixed","Index","_this$props$state","Tables_SellBuyTable","Exchange","highestClass","lowestClass","Loader","App","target","changeCurrencyR","setState","defineProperty","setTimeout","highlightChanges","_this3","loadComponents","webSocketApi","components_Header","components_CurrencyButton","changeCurrency","components_Exchange","Tables","components_Loader_Loader","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7083abe4.chunk.js","sourcesContent":["const initState = {\n    url: 'https://api.bitbay.net/rest/trading/orderbook/',\n    currency: 'BTC-PLN',\n    response: {},\n    loading: true\n};\n\nconst rootReducer = (state = initState, action) => {\n    switch (action.type) {\n        case 'TOGGLE_LOADER':\n            return {\n                ...state,\n                loading: action.toggle\n            };\n\n        case 'FETCH_API':\n            return {\n                ...state,\n                response: {...action.response},\n                highestBid: action.response.data.buy[0].ra,\n                lowestBid: action.response.data.sell[0].ra\n            };\n\n        case 'FETCH_ERROR':\n            return {\n                ...state,\n                response: {...action.error}\n            };\n\n        case 'UPDATE_WEBSOCKET':\n            return {\n                ...state,\n                highestBid: action.bids.highestBid,\n                lowestBid: action.bids.lowestAsk\n            };\n\n        case 'CHANGE_CURRENCY':\n            return {\n                ...state,\n                currency: action.currency\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default rootReducer;\n","import {Component} from 'react'\nimport {connect} from 'react-redux';\nimport axios from \"axios\";\n\nclass WebSocketApi extends Component {\n\n    fetchApi() {\n        this.props.toggleLoader(true);\n        axios.get(this.props.state.url + this.props.state.currency)\n            .then(response => {\n                if (response.data.status !== 'Fail') {\n                    this.props.fetchApi(response);\n                    this.props.toggleLoader(false)\n                } else {\n                    this.props.fetchError(response);\n                }\n            })\n            .catch(error => {\n                this.props.fetchError(error);\n            });\n    }\n\n    websocket() {\n        const webSocket = new WebSocket('wss://api2.bitbay.net/websocket/');\n        webSocket.onopen = () => {\n            webSocket.send(`{\"action\": \"subscribe-public\", \"module\": \"trading\", \"path\": \"ticker\"}`)\n        };\n\n        webSocket.onmessage = e => {\n            const data = e.data,\n                parsedData = JSON.parse(data);\n\n            if (parsedData.hasOwnProperty('message')) {\n                if (parsedData.message.market.code === this.props.state.currency) {\n                    this.props.updateWebsocket(parsedData.message);\n                }\n            }\n        };\n    }\n\n    componentDidMount() {\n        this.fetchApi();\n        this.websocket();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.state.currency !== this.props.state.currency) {\n            this.fetchApi();\n        }\n    }\n\n\n    render() {\n        return null\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        state: state\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        toggleLoader: (toggle) => {\n            dispatch({type: 'TOGGLE_LOADER', toggle: toggle})\n        },\n        fetchApi: (response) => {\n            dispatch({type: 'FETCH_API', response: response})\n        },\n        fetchError: (error) => {\n            dispatch({type: 'FETCH_ERROR', error: error})\n        },\n        updateWebsocket: (bids) => {\n            dispatch({type: 'UPDATE_WEBSOCKET', bids: bids})\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WebSocketApi);\n","import React from 'react';\n\nconst Header = () => {\n    return (\n        <header>\n            <h2 className=\"site-title\">\n                <span className=\"text1\">Booty</span>\n                <span className=\"text2\">Bay</span>\n            </h2>\n        </header>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport FormControl from \"@material-ui/core/FormControl/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel/InputLabel\";\nimport Select from \"@material-ui/core/Select/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem/MenuItem\";\n\nconst CurrencyButton = ({currency, onChange}) => {\n    return (\n        <FormControl className=\"currency-select\">\n            <InputLabel htmlFor=\"currency-simple\">Waluta</InputLabel>\n            <Select\n                value={currency}\n                onChange={(e) => onChange(e)}\n                inputProps={{\n                    name: 'currency',\n                    id: 'currency-simple',\n                }}\n            >\n                <MenuItem value=\"BTC-PLN\">BTC-PLN</MenuItem>\n                <MenuItem value=\"BTC-EUR\">BTC-EUR</MenuItem>\n                <MenuItem value=\"BTC-USD\">BTC-USD</MenuItem>\n                <MenuItem value=\"ETH-PLN\">ETH-PLN</MenuItem>\n                <MenuItem value=\"LSK-PLN\">LSK-PLN</MenuItem>\n                <MenuItem value=\"LTC-PLN\">LTC-PLN</MenuItem>\n                <MenuItem value=\"GAME-PLN\">GAME-PLN</MenuItem>\n                <MenuItem value=\"DASH-PLN\">DASH-PLN</MenuItem>\n            </Select>\n        </FormControl>\n    );\n};\n\nexport default CurrencyButton;\n","import React from 'react';\n\nconst SellBuyTable = ({response, currency, buySell}) => {\n\n    if (!response.hasOwnProperty('data')) {\n        return <h2>Fetching data from API</h2>\n    } else {\n        const splitCurrency = currency.split('-');\n\n        let data, text1, text2;\n\n        if (buySell === 'buy') {\n            data = response.data.buy;\n            text1 = 'Oferty skupu - ';\n            text2 = 'BID'\n        } else {\n            data = response.data.sell;\n            text1 = 'Oferty sprzedaży - ';\n            text2 = 'ASK';\n        }\n\n        let table = data.slice(0, 10).map((item, index) => {\n            return (\n                <tr key={index}>\n                    <td>{item.ra}</td>\n                    <td>{item.pa}</td>\n                    <td>{(item.ra * item.pa).toFixed(2)}</td>\n                </tr>\n            )\n        });\n\n        return (\n            <div className={'orderbook ' + text2}>\n                <h4>{text1}<span>{text2}</span></h4>\n                <div className=\"table-responsive\">\n                    <table className=\"table table-bordered\">\n                        <tbody>\n                        <tr className=\"table-head\">\n                            <th>Kurs</th>\n                            <th>Ilość <span>{splitCurrency[0]}</span></th>\n                            <th>Suma <span>{splitCurrency[1]}</span></th>\n                        </tr>\n                        {table}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default SellBuyTable;\n","import React, {Component} from 'react';\n\nimport SellBuyTable from './SellBuyTable';\n\nclass Index extends Component {\n    render() {\n        const {currency, response} = this.props.state;\n\n        return (\n            <div className=\"offers\">\n                <div className=\"row\">\n                    <div className=\"col-sm-6\">\n                        <SellBuyTable buySell={'buy'} response={response} currency={currency}/>\n                    </div>\n\n                    <div className=\"col-sm-6\">\n                        <SellBuyTable buySell={'sell'} response={response} currency={currency}/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Index;\n","import React from 'react';\n\nconst Exchange = ({highestBid, lowestBid, highestClass, lowestClass}) => {\n    return (\n        <div className=\"buy-sell-bar\">\n            <p className=\"buy\">\n                <b>SKUP • BID: </b>\n                <span className={highestClass}>{highestBid}</span>\n            </p>\n\n            <p className=\"sell\">\n                <b>SPRZEDAŻ • ASK: </b>\n                <span className={lowestClass}>{lowestBid}</span>\n            </p>\n        </div>\n    );\n};\n\nexport default Exchange;\n","import React from 'react';\n\nconst Loader = () => {\n    return (\n        <div className=\"loader-wrap\">\n            <div className=\"loader\">\n                <span className=\"loader-item\"/>\n                <span className=\"loader-item\"/>\n                <span className=\"loader-item\"/>\n                <span className=\"loader-item\"/>\n                <span className=\"loader-item\"/>\n                <span className=\"loader-item\"/>\n                <span className=\"loader-item\"/>\n                <span className=\"loader-item\"/>\n                <span className=\"loader-item\"/>\n                <span className=\"loader-item\"/>\n            </div>\n        </div>\n    );\n};\n\nexport default Loader;\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport './styles/main.css';\n\nimport WebSocketApi from './containers/webSocketApi';\nimport Header from './components/Header';\nimport CurrencyButton from './components/CurrencyButton';\nimport Tables from './components/Tables/index';\nimport Exchange from './components/Exchange';\n// import Errors from './components/Errors/Errors';\nimport Loader from './components/Loader/Loader';\n\nclass App extends Component {\n    state = {\n        lowestClass: '',\n        highestClass: ''\n    };\n\n    changeCurrency(e) {\n        const value = e.target.value;\n        this.props.changeCurrencyR(value);\n    }\n\n    highlightChanges(className) {\n        this.setState({[className]: 'updated'},\n            () => setTimeout(() => {\n                this.setState({[className]: ''})\n            }, 250));\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.highestBid !== this.props.highestBid) {\n            this.highlightChanges('highestClass');\n        }\n\n        if (prevProps.lowestBid !== this.props.lowestBid) {\n            this.highlightChanges('lowestClass');\n        }\n    }\n\n    // todo a moze by tak dodac animacje dla wejscia selecta z wyborem waluty?\n    render() {\n        const loadComponents = this.props.response.hasOwnProperty('data') &&\n            this.props.response.data.status !== 'Fail' && !this.props.loading;\n\n        return (\n            <div className=\"container-fluid\">\n                <WebSocketApi/>\n                <Header/>\n                <div className=\"content-wrapper\">\n                    <CurrencyButton currency={this.props.currency} onChange={(e) => this.changeCurrency(e)}/>\n                    {loadComponents ? (\n                        <div className=\"data\">\n                            <Exchange highestBid={this.props.highestBid}\n                                      lowestBid={this.props.lowestBid}\n                                      highestClass={this.state.highestClass}\n                                      lowestClass={this.state.lowestClass}/>\n                            <Tables state={this.props}/>\n                        </div>\n                    ) : (\n                        <div className=\"loader-wrapper\">\n                            <Loader/>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        currency: state.currency,\n        response: state.response,\n        highestBid: state.highestBid,\n        lowestBid: state.lowestBid,\n        loading: state.loading\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        changeCurrencyR: (currency) => {\n            dispatch({type: 'CHANGE_CURRENCY', currency: currency})\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\n\nimport rootReducer from './reducers/rootReducer';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}